#include "LedControl.h"  //引用 LedControl 程式庫
LedControl lc1=LedControl(12,11,10,8);
LedControl lc2=LedControl(9,8,7,8);//宣告 LedControl 物件
byte a[8]={B00000000,B00000000,B11111111,B00001001,B10001001,B10101001,B11001001,B10001001};
byte b[8]={B10001001,B10001001,B10001001,B10001001,B11001001,B10101001,B10001001,B00001111};
byte c[8]={B00000000,B00000010,B00000010,B11111010,B01001010,B01001010,B01001010,B01001010};
byte d[8]={B11111111,B01001010,B01001010,B01001010,B01001010,B11111010,B00000010,B00000010};
byte e[8]={B00010000,B00010010,B10010010,B11111110,B01010001,B10010001,B00000000,B00100010};
byte f[8]={B01000100,B10011000,B00010000,B00000000,B11111111,B00000000,B00000000,B00000000};
byte g[8]={B00000000,B00000000,B11111111,B01001001,B01001001,B01001001,B11101001,B01001001};
byte h[8]={B01001001,B01001001,B01001001,B01001001,B11101001,B01001001,B01001001,B00001111};
byte i[8]={B11000000,B00110000,B00001111,B00001000,B10001000,B01001000,B00111111,B00001000};
byte j[8]={B00001000,B00001000,B00001000,B00001000,B11111111,B00001000,B00001000,B00001000};
byte k[8]={B00000000,B00000000,B00000000,B01000011,B00100010,B00010010,B00001010,B01000110};
byte l[8]={B11111111,B00000110,B00001010,B00010010,B00100010,B01000011,B01000000,B00000000};
byte m[8]={B00000010,B00000001,B00000000,B11111111,B00000000,B00000001,B00001000,B00001000};
byte n[8]={B00001000,B00001001,B00000101,B00000100,B11111111,B00000100,B00000100,B00000000};
byte o[8]={B11000000,B00110000,B00001111,B00000010,B00000010,B11111110,B10000011,B01000010};
byte p[8]={B01000110,B00001010,B00010010,B00110010,B01101011,B11001010,B10000010,B10000010};
byte temp1[8]={0,0,0,0,0,0,0,0};
byte temp2[8]={0,0,0,0,0,0,0,0};
byte temp3[8]={0,0,0,0,0,0,0,0};
byte temp4[8]={0,0,0,0,0,0,0,0};
byte temp5[8]={0,0,0,0,0,0,0,0};
byte temp6[8]={0,0,0,0,0,0,0,0};
byte temp7[8]={0,0,0,0,0,0,0,0};
byte temp8[8]={0,0,0,0,0,0,0,0};//上面那排的暫存陣列
byte Temp1[8]={0,0,0,0,0,0,0,0};
byte Temp2[8]={0,0,0,0,0,0,0,0};
byte Temp3[8]={0,0,0,0,0,0,0,0};
byte Temp4[8]={0,0,0,0,0,0,0,0};
byte Temp5[8]={0,0,0,0,0,0,0,0};
byte Temp6[8]={0,0,0,0,0,0,0,0};
byte Temp7[8]={0,0,0,0,0,0,0,0};
byte Temp8[8]={0,0,0,0,0,0,0,0};

void setup() {
  for(int i=0;i<8;i++){
    lc1.shutdown(i,false);/* Set the brightness to a medium values */
    lc1.setIntensity(i,0);/* and clear the display */
    lc1.clearDisplay(i);
  }
  for(int i=0;i<8;i++){
    lc2.shutdown(i,false);/* Set the brightness to a medium values */
    lc2.setIntensity(i,0);/* and clear the display */
    lc2.clearDisplay(i);
  }
}
void loop() {
  for (int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      Temp1[t]=Temp1[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc2.setRow(0,t,Temp1[t]);
    }
    temp1[7]=a[s];
    Temp1[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc2.setRow(0,7,Temp1[7]);
  }
  for(int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      temp2[t]=temp2[t+1];
      Temp1[t]=Temp1[t+1];
      Temp2[t]=Temp2[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc1.setRow(1,t,temp2[t]);
      lc2.setRow(0,t,Temp1[t]);
      lc2.setRow(1,t,Temp2[t]);
    }
    temp1[7]=b[s];
    temp2[7]=a[s];
    Temp1[7]=j[s];
    Temp2[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc1.setRow(1,7,temp2[7]);
    lc2.setRow(0,7,Temp1[7]);
    lc2.setRow(1,7,Temp2[7]);
  }
  for(int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      temp2[t]=temp2[t+1];
      temp3[t]=temp3[t+1];
      Temp1[t]=Temp1[t+1];
      Temp2[t]=Temp2[t+1];
      Temp3[t]=Temp3[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc1.setRow(1,t,temp2[t]);
      lc1.setRow(2,t,temp3[t]);
      lc2.setRow(0,t,Temp1[t]);
      lc2.setRow(1,t,Temp2[t]);
      lc2.setRow(2,t,Temp3[t]);
    }
    temp1[7]=c[s];
    temp2[7]=b[s];
    temp3[7]=a[s];
    Temp1[7]=k[s];
    Temp2[7]=j[s];
    Temp3[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc1.setRow(1,7,temp2[7]);
    lc1.setRow(2,7,temp3[7]);
    lc2.setRow(0,7,Temp1[7]);
    lc2.setRow(1,7,Temp2[7]);
    lc2.setRow(2,7,Temp3[7]);
  }
  for(int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      temp2[t]=temp2[t+1];
      temp3[t]=temp3[t+1];
      temp4[t]=temp4[t+1];
      Temp1[t]=Temp1[t+1];
      Temp2[t]=Temp2[t+1];
      Temp3[t]=Temp3[t+1];
      Temp4[t]=Temp4[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc1.setRow(1,t,temp2[t]);
      lc1.setRow(2,t,temp3[t]);
      lc1.setRow(3,t,temp4[t]);
      lc2.setRow(0,t,Temp1[t]);
      lc2.setRow(1,t,Temp2[t]);
      lc2.setRow(2,t,Temp3[t]);
      lc2.setRow(3,t,Temp4[t]);
    }
    temp1[7]=d[s];
    temp2[7]=c[s];
    temp3[7]=b[s];
    temp4[7]=a[s];
    Temp1[7]=l[s];
    Temp2[7]=k[s];
    Temp3[7]=j[s];
    Temp4[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc1.setRow(1,7,temp2[7]);
    lc1.setRow(2,7,temp3[7]);
    lc1.setRow(3,7,temp4[7]);
    lc2.setRow(0,7,Temp1[7]);
    lc2.setRow(1,7,Temp2[7]);
    lc2.setRow(2,7,Temp3[7]);
    lc2.setRow(3,7,Temp4[7]);
  }
  for(int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      temp2[t]=temp2[t+1];
      temp3[t]=temp3[t+1];
      temp4[t]=temp4[t+1];
      temp5[t]=temp5[t+1];
      Temp1[t]=Temp1[t+1];
      Temp2[t]=Temp2[t+1];
      Temp3[t]=Temp3[t+1];
      Temp4[t]=Temp4[t+1];
      Temp5[t]=Temp5[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc1.setRow(1,t,temp2[t]);
      lc1.setRow(2,t,temp3[t]);
      lc1.setRow(3,t,temp4[t]);
      lc1.setRow(4,t,temp5[t]);
      lc2.setRow(0,t,Temp1[t]);
      lc2.setRow(1,t,Temp2[t]);
      lc2.setRow(2,t,Temp3[t]);
      lc2.setRow(3,t,Temp4[t]);
      lc2.setRow(4,t,Temp5[t]);
    }
    temp1[7]=e[s];
    temp2[7]=d[s];
    temp3[7]=c[s];
    temp4[7]=b[s];
    temp5[7]=a[s];
    Temp1[7]=m[s];
    Temp2[7]=l[s];
    Temp3[7]=k[s];
    Temp4[7]=j[s];
    Temp5[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc1.setRow(1,7,temp2[7]);
    lc1.setRow(2,7,temp3[7]);
    lc1.setRow(3,7,temp4[7]);
    lc1.setRow(4,7,temp5[7]);
    lc2.setRow(0,7,Temp1[7]);
    lc2.setRow(1,7,Temp2[7]);
    lc2.setRow(2,7,Temp3[7]);
    lc2.setRow(3,7,Temp4[7]);
    lc2.setRow(4,7,Temp5[7]);
  }
  for(int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      temp2[t]=temp2[t+1];
      temp3[t]=temp3[t+1];
      temp4[t]=temp4[t+1];
      temp5[t]=temp5[t+1];
      temp6[t]=temp6[t+1];
      Temp1[t]=Temp1[t+1];
      Temp2[t]=Temp2[t+1];
      Temp3[t]=Temp3[t+1];
      Temp4[t]=Temp4[t+1];
      Temp5[t]=Temp5[t+1];
      Temp6[t]=Temp6[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc1.setRow(1,t,temp2[t]);
      lc1.setRow(2,t,temp3[t]);
      lc1.setRow(3,t,temp4[t]);
      lc1.setRow(4,t,temp5[t]);
      lc1.setRow(5,t,temp6[t]);
      lc2.setRow(0,t,Temp1[t]);
      lc2.setRow(1,t,Temp2[t]);
      lc2.setRow(2,t,Temp3[t]);
      lc2.setRow(3,t,Temp4[t]);
      lc2.setRow(4,t,Temp5[t]);
      lc2.setRow(5,t,Temp6[t]);
    }
    temp1[7]=f[s];
    temp2[7]=e[s];
    temp3[7]=d[s];
    temp4[7]=c[s];
    temp5[7]=b[s];
    temp6[7]=a[s];
    Temp1[7]=n[s];
    Temp2[7]=m[s];
    Temp3[7]=l[s];
    Temp4[7]=k[s];
    Temp5[7]=j[s];
    Temp6[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc1.setRow(1,7,temp2[7]);
    lc1.setRow(2,7,temp3[7]);
    lc1.setRow(3,7,temp4[7]);
    lc1.setRow(4,7,temp5[7]);
    lc1.setRow(5,7,temp6[7]);
    lc2.setRow(0,7,Temp1[7]);
    lc2.setRow(1,7,Temp2[7]);
    lc2.setRow(2,7,Temp3[7]);
    lc2.setRow(3,7,Temp4[7]);
    lc2.setRow(4,7,Temp5[7]);
    lc2.setRow(5,7,Temp6[7]);
  }
  for(int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      temp2[t]=temp2[t+1];
      temp3[t]=temp3[t+1];
      temp4[t]=temp4[t+1];
      temp5[t]=temp5[t+1];
      temp6[t]=temp6[t+1];
      temp7[t]=temp7[t+1];
      Temp1[t]=Temp1[t+1];
      Temp2[t]=Temp2[t+1];
      Temp3[t]=Temp3[t+1];
      Temp4[t]=Temp4[t+1];
      Temp5[t]=Temp5[t+1];
      Temp6[t]=Temp6[t+1];
      Temp7[t]=Temp7[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc1.setRow(1,t,temp2[t]);
      lc1.setRow(2,t,temp3[t]);
      lc1.setRow(3,t,temp4[t]);
      lc1.setRow(4,t,temp5[t]);
      lc1.setRow(5,t,temp6[t]);
      lc1.setRow(6,t,temp7[t]);
      lc2.setRow(0,t,Temp1[t]);
      lc2.setRow(1,t,Temp2[t]);
      lc2.setRow(2,t,Temp3[t]);
      lc2.setRow(3,t,Temp4[t]);
      lc2.setRow(4,t,Temp5[t]);
      lc2.setRow(5,t,Temp6[t]);
      lc2.setRow(6,t,Temp7[t]);
    }
    temp1[7]=g[s];
    temp2[7]=f[s];
    temp3[7]=e[s];
    temp4[7]=d[s];
    temp5[7]=c[s];
    temp6[7]=b[s];
    temp7[7]=a[s];
    Temp1[7]=o[s];
    Temp2[7]=n[s];
    Temp3[7]=m[s];
    Temp4[7]=l[s];
    Temp5[7]=k[s];
    Temp6[7]=j[s];
    Temp7[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc1.setRow(1,7,temp2[7]);
    lc1.setRow(2,7,temp3[7]);
    lc1.setRow(3,7,temp4[7]);
    lc1.setRow(4,7,temp5[7]);
    lc1.setRow(5,7,temp6[7]);
    lc1.setRow(6,7,temp7[7]);
    lc2.setRow(0,7,Temp1[7]);
    lc2.setRow(1,7,Temp2[7]);
    lc2.setRow(2,7,Temp3[7]);
    lc2.setRow(3,7,Temp4[7]);
    lc2.setRow(4,7,Temp5[7]);
    lc2.setRow(5,7,Temp6[7]);
    lc2.setRow(6,7,Temp7[7]);
  }
  for(int s=0;s<8;s++){
    for(int t=0;t<7;t++){
      temp1[t]=temp1[t+1];
      temp2[t]=temp2[t+1];
      temp3[t]=temp3[t+1];
      temp4[t]=temp4[t+1];
      temp5[t]=temp5[t+1];
      temp6[t]=temp6[t+1];
      temp7[t]=temp7[t+1];
      temp8[t]=temp8[t+1];
      Temp1[t]=Temp1[t+1];
      Temp2[t]=Temp2[t+1];
      Temp3[t]=Temp3[t+1];
      Temp4[t]=Temp4[t+1];
      Temp5[t]=Temp5[t+1];
      Temp6[t]=Temp6[t+1];
      Temp7[t]=Temp7[t+1];
      Temp8[t]=Temp8[t+1];
      lc1.setRow(0,t,temp1[t]);
      lc1.setRow(1,t,temp2[t]);
      lc1.setRow(2,t,temp3[t]);
      lc1.setRow(3,t,temp4[t]);
      lc1.setRow(4,t,temp5[t]);
      lc1.setRow(5,t,temp6[t]);
      lc1.setRow(6,t,temp7[t]);
      lc1.setRow(7,t,temp8[t]);
      lc2.setRow(0,t,Temp1[t]);
      lc2.setRow(1,t,Temp2[t]);
      lc2.setRow(2,t,Temp3[t]);
      lc2.setRow(3,t,Temp4[t]);
      lc2.setRow(4,t,Temp5[t]);
      lc2.setRow(5,t,Temp6[t]);
      lc2.setRow(6,t,Temp7[t]);
      lc2.setRow(7,t,Temp8[t]);
    }
    temp1[7]=h[s];
    temp2[7]=g[s];
    temp3[7]=f[s];
    temp4[7]=e[s];
    temp5[7]=d[s];
    temp6[7]=c[s];
    temp7[7]=b[s];
    temp8[7]=a[s];
    Temp1[7]=p[s];
    Temp2[7]=o[s];
    Temp3[7]=n[s];
    Temp4[7]=m[s];
    Temp5[7]=l[s];
    Temp6[7]=k[s];
    Temp7[7]=j[s];
    Temp8[7]=i[s];
    lc1.setRow(0,7,temp1[7]);
    lc1.setRow(1,7,temp2[7]);
    lc1.setRow(2,7,temp3[7]);
    lc1.setRow(3,7,temp4[7]);
    lc1.setRow(4,7,temp5[7]);
    lc1.setRow(5,7,temp6[7]);
    lc1.setRow(6,7,temp7[7]);
    lc1.setRow(7,7,temp8[7]);
    lc2.setRow(0,7,Temp1[7]);
    lc2.setRow(1,7,Temp2[7]);
    lc2.setRow(2,7,Temp3[7]);
    lc2.setRow(3,7,Temp4[7]);
    lc2.setRow(4,7,Temp5[7]);
    lc2.setRow(5,7,Temp6[7]);
    lc2.setRow(6,7,Temp7[7]);
    lc2.setRow(7,7,Temp8[7]);
  }
 for (int i=0;i<8;i++){
    temp1[i]=0;
    temp2[i]=0;
    temp3[i]=0;
    temp4[i]=0;
    temp5[i]=0;
    temp6[i]=0;
    temp7[i]=0;
    temp8[i]=0;
    Temp1[i]=0;
    Temp2[i]=0;
    Temp3[i]=0;
    Temp4[i]=0;
    Temp5[i]=0;
    Temp6[i]=0;
    Temp7[i]=0;
    Temp8[i]=0;
  }
  for (int s=0;s<8;s++){
    lc1.setRow(0,s,h[s]);
    lc2.setRow(0,s,p[s]);
    lc1.setRow(1,s,g[s]);
    lc2.setRow(1,s,o[s]);
    lc1.setRow(2,s,f[s]);
    lc2.setRow(2,s,n[s]);
    lc1.setRow(3,s,e[s]);
    lc2.setRow(3,s,m[s]);
    lc1.setRow(4,s,d[s]);
    lc2.setRow(4,s,l[s]);
    lc1.setRow(5,s,c[s]);
    lc2.setRow(5,s,k[s]);
    lc1.setRow(6,s,b[s]);
    lc2.setRow(6,s,j[s]);
    lc1.setRow(7,s,a[s]);
    lc2.setRow(7,s,i[s]);
  }
  delay(200);  
  for (int i=0;i<8;i++){
    for (int j=0;j<8;j++){
      lc1.setRow(i,7-j,0);
      lc2.setRow(i,7-j,0);
    delay(200);
    }  
  }
}
